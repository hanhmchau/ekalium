@using Kalium.Shared.Consts
@inherits Kalium.Client.Shared.RegisterModalModel

<div class="woocommerce-account my-modal" id="register-modal">
    <form method="post" class="woocommerce-form woocommerce-form-register register">
        <h2>Register</h2>

        @if (GeneralError)
        {
            <div class="background-red text-white" style="text-align: center; padding: 10px;">
                Registration failed. Please try again.
            </div>
        }
        <p class="woocommerce-form-row woocommerce-form-row--wide form-row form-row-wide labeled-input-row">
            <label for="reg_email">Username<span class="required">*</span></label>
            <input class="woocommerce-Input woocommerce-Input--text input-text" onchange="@(username => CheckUsername(username.Value as string))"
                   name="email" id="reg_email" autocomplete="email" value="" type="email" />
        </p>
        @if (DuplicateUsername)
        {
            <div class="text-red">This username is already used.</div>
        }
        @if (HasTypedUsername && string.IsNullOrWhiteSpace(Username))
        {
            <div class="text-red">Username cannot be empty or contain only whitespaces.</div>
        }

        <p class="woocommerce-form-row woocommerce-form-row--wide form-row form-row-wide labeled-input-row">
            <label for="reg_email">Email address<span class="required">*</span></label>
            <input class="woocommerce-Input woocommerce-Input--text input-text" onchange="@(email => CheckEmail(email.Value as string))"
                   name="email" id="reg_email" autocomplete="email" value="" type="email" />
        </p>
        @if (DuplicateEmail)
        {
            <div class="text-red">This email address is already used.</div>
        }
        @if (HasTypedPassword && string.IsNullOrWhiteSpace(Email))
        {
            <div class="text-red">Email cannot be empty or contain only whitespaces.</div>
        }
        else
        {
            if (!ValidatorUtils.IsValidEmail(Email))
            {
                <div class="text-red">Invalid email.</div>
            }
        }

        <p class="woocommerce-form-row woocommerce-form-row--wide form-row form-row-wide labeled-input-row labeled-input-row--wrap">
            <label for="reg_password">Password<span class="required">*</span></label>
            <input class="woocommerce-Input woocommerce-Input--text input-text" onchange="@(password => { Password = password.Value as string; HasTypedPassword = true; })"
                   name="password" id="reg_password" autocomplete="off" type="@(PasswordMode ? "password" : "text")" />
            <div onclick=@TogglePasswordMode><i class="icon @(PasswordMode ? "icon-basic-eye" : "icon-basic-eye-closed")"></i></div>
        </p>
        @if (HasTypedPassword && (string.IsNullOrEmpty(Password) || Password.Length < 4))
        {
            <div class="text-red">Password must contain at least 4 characters.</div>
        }

        <div class="woocommerce-privacy-policy-text"></div>
        <p class="woocommerce-FormRow form-row">
            <button type="button" onclick="@TryRegister" class="woocommerce-Button button @(IsValid() ? "button-disabled" : "")" name="register" value="Register">Register</button>
            <div style="display: inline-block; padding-left: 15px" class="red-text modal-close" onclick="@(() => ShowModal("login-modal"))">Have an account? Login</div>
        </p>
    </form>
</div>

@functions{
   
}