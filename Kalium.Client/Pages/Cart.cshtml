@page "/cart"
@using Kalium.Shared.Models
@using Kalium.Shared.Services
@using Kalium.Client.Extensions
@using Kalium.Client.Pages
@using Microsoft.AspNetCore.Blazor.Browser.Http
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Blazor.Browser.Interop
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor.Services;
@using Microsoft.AspNetCore.Http.Extensions
@using Newtonsoft.Json
@inject HttpClient Http
@inject IFetcher Fetcher
@inject LocalStorage Storage
@inject HttpClient Http
@inject Toastr Toastr
@inject IUriHelper UriHelper
@inject IUtil Util
@inject IAccountService Account

@inherits CartModel

<div class="container default-margin woocommerce-cart">
@if (ECart == null || !ECart.Contents.Any())
{
    if (Loaded)
    {
        <div>Your cart is empty!</div>
        <a href="/shop" class="pointer button wc-backward" style="margin: 20px 0;">Return to shopping</a>
    }
    else
    {
        <div>Loading...</div>
    }
}
else
{
    <button type="button" style="visibility: hidden;" id="refresh-cart" onclick="@RefreshCart"></button>
    <div class="woocommerce">
    <form class="woocommerce-cart-form" method="post">
        <table class="shop_table shop_table_responsive cart woocommerce-cart-form__contents" cellspacing="0">
            <thead>
            <tr>
                <th class="product-remove">&nbsp;</th>
                <th class="product-thumbnail">&nbsp;</th>
                <th class="product-name">Product</th>
                <th class="product-price">Price</th>
                <th class="product-quantity">Quantity</th>
                <th class="product-subtotal">Total</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in ECart.Contents)
            {

                <tr class="woocommerce-cart-form__cart-item cart_item">

                    <td onclick="@(() => RemoveFromCart(item))" class="pointer product-remove">
                        <a class="remove" aria-label="Remove this item">
                            <i class="flaticon-cross37"></i>
                        </a>
                    </td>

                    <td class="product-thumbnail">
                        <a href="/product/@item.Product.NameUrl">
                            <img width="550" height="700" src="@item.Product.MainImage.Url"
                                 class="attachment-woocommerce_thumbnail size-woocommerce_thumbnail wp-post-image" alt="">
                        </a>
                    </td>

                    <td class="product-name" data-title="Product">
                        <a href="/product/@item.Product.NameUrl">@item.Product.Name</a>
                        <ul style="font-size: 14px; margin: 10px 0px 0px 10px;">
                            @foreach (var choice in item.Choices)
                            {
                                if (choice.Value != null)
                                {
                                    <li style="list-style-type: circle; padding-top: 5px;">
                                        <span>@choice.Key.Name: </span><span>@choice.Value.Name (£@choice.Value.Price)</span>
                                    </li>
                                }
                            }
                        </ul>
                    </td>

                    <td class="product-price" data-title="Price">
                        <span class="woocommerce-Price-amount amount"><span class="woocommerce-Price-currencySymbol">£</span>@item.SingleTotal()</span>
                    </td>

                    <td class="product-quantity" data-title="Quantity">
                        <div class="quantity buttons_added">
                            <input type="button" value="-" class="minus" onclick="@(() => UpdateCartQuantity(item))" />
                            <label class="screen-reader-text" for="quantity_@item.Guid">Quantity</label>
                            <input class="input-text qty text input-integer-only" id="quantity_@item.Guid"
                                   inputmode="numeric" min="0" onchange="@(() => UpdateCartQuantity(item))"
                                   pattern="[0-9]*" size="4" step="1" title="Qty" type="number"
                                   value="@item.Quantity" />
                            <input type="button" value="+" class="plus" onclick="@(() => UpdateCartQuantity(item))" />
                        </div>
                    </td>

                    <td class="product-subtotal" data-title="Total">
                        <span class="woocommerce-Price-amount amount"><span class="woocommerce-Price-currencySymbol">£</span>@item.Total()</span>
                    </td>
                </tr>
            }
            <tr>
                <td colspan="6" class="actions">
                    <div class="coupon">
                        <label for="coupon_code">Coupon:</label>
                        <input type="text" name="coupon_code" class="input-text" id="coupon_code"
                               value="" placeholder="Coupon code" bind="@CouponName" />
                        <button type="button" onclick="@ApplyCoupon" class="button" name="apply_coupon" value="Apply coupon">Apply coupon</button>
                    </div>
                    <button type="button" class="button button-secondary" name="update_cart" onclick="@ClearCartPrompt">Clear cart</button>

                    <input type="hidden" id="woocommerce-cart-nonce" name="woocommerce-cart-nonce" value="67a447d7d1"><input type="hidden" name="_wp_http_referer" value="/shop/cart/">
                </td>
            </tr>

            </tbody>
        </table>
    </form>

    <div class="cart-collaterals">
    <div class="cart_totals ">
    <h2>Cart totals</h2>
    <table cellspacing="0" class="shop_table shop_table_responsive">
        <tbody>
        @if (ECart.Coupons.Any())
        {
            <tr class="cart-subtotal">
                <th>Subtotal</th>
                <td data-title="Subtotal"><span class="woocommerce-Price-amount amount"><span class="woocommerce-Price-currencySymbol">£</span>@ECart.PreCouponTotal()</span></td>
            </tr>
            <tr class="shipping">
                <th>Coupons</th>
                <td data-title="Shipping">
                    <ul id="shipping_method">
                        @foreach (var coupon in ECart.Coupons)
                        {
                            <li>
                                <button class="button button-secondary" style="padding: 2px 9px; font-size: 12px; margin-right: 10px; transform: translateY(-2px)" 
                                        onclick="@(() => RemoveCoupon(coupon))">x</button>
                                <label for="shipping_method_0_legacy_flat_rate">
                                    @coupon.Key:
                                    <span class="woocommerce-Price-amount amount">
                                        <span class="woocommerce-Price-currencySymbol">£</span>
                                        -@coupon.Reduction
                                    </span>
                                </label>
                            </li>
                        }
                    </ul>
                </td>
            </tr>

        }
        <tr class="shipping hide">
            <th>Shipping</th>
            <td data-title="Shipping">
                <ul id="shipping_method">
                    <li>
                        <label for="shipping_method_0_legacy_flat_rate"><input type="radio" name="shipping_method[0]" data-index="0" id="shipping_method_0_legacy_flat_rate" value="legacy_flat_rate" class="shipping_method" checked="checked"> Flat Rate: <span class="woocommerce-Price-amount amount"><span class="woocommerce-Price-currencySymbol">£</span>5.00</span></label>
                    </li>
                    <li>
                        <label for="shipping_method_0_legacy_free_shipping"><input type="radio" name="shipping_method[0]" data-index="0" id="shipping_method_0_legacy_free_shipping" value="legacy_free_shipping" class="shipping_method"> Free Shipping: <span class="woocommerce-Price-amount amount"><span class="woocommerce-Price-currencySymbol">£</span>0.00</span></label>
                    </li>
                    <li>
                        <label for="shipping_method_0_legacy_international_delivery"><input type="radio" name="shipping_method[0]" data-index="0" id="shipping_method_0_legacy_international_delivery" value="legacy_international_delivery" class="shipping_method"> Flat Rate: <span class="woocommerce-Price-amount amount"><span class="woocommerce-Price-currencySymbol">£</span>10.00</span></label>
                    </li>
                    <li>
                        <label for="shipping_method_0_legacy_local_delivery"><input type="radio" name="shipping_method[0]" data-index="0" id="shipping_method_0_legacy_local_delivery" value="legacy_local_delivery" class="shipping_method"> Local Delivery: <span class="woocommerce-Price-amount amount"><span class="woocommerce-Price-currencySymbol">£</span>2.00</span></label>
                    </li>
                </ul>


            </td>
        </tr>
        <tr class="order-total">
            <th>Total</th>
            <td data-title="Total"><strong><span class="woocommerce-Price-amount amount"><span class="woocommerce-Price-currencySymbol">£</span>@ECart.PostCouponTotal()</span></strong> </td>
        </tr>
        </tbody>
    </table>
    <div class="wc-proceed-to-checkout">
    <div class="cart-buttons-update-checkout" onclick="@(() => CheckOut())">
        <a class="pointer checkout-button button alt wc-forward">
            Proceed to checkout
        </a>
    </div>
    <form class="woocommerce-shipping-calculator hide" action="https://demo.kaliumtheme.com/shop/cart/" method="post">

    <p><a href="#" class="shipping-calculator-button">Calculate shipping</a></p>

    <section class="shipping-calculator-form" style="display: none;">

    <p class="form-row form-row-wide" id="calc_shipping_country_field">
    <select name="calc_shipping_country" id="calc_shipping_country" class="country_to_state country_select" rel="calc_shipping_state">
    <option value="">Select a country…</option>
    <option value="AX">Åland Islands</option>
    <option value="AF">Afghanistan</option>
    <option value="AL">Albania</option>
    <option value="DZ">Algeria</option>
    <option value="AS">American Samoa</option>
    <option value="AD">Andorra</option>
    <option value="AO">Angola</option>
    <option value="AI">Anguilla</option>
    <option value="AQ">Antarctica</option>
    <option value="AG">Antigua and Barbuda</option>
    <option value="AR">Argentina</option>
    <option value="AM">Armenia</option>
    <option value="AW">Aruba</option>
    <option value="AU">Australia</option>
    <option value="AT">Austria</option>
    <option value="AZ">Azerbaijan</option>
    <option value="BS">Bahamas</option>
    <option value="BH">Bahrain</option>
    <option value="BD">Bangladesh</option>
    <option value="BB">Barbados</option>
    <option value="BY">Belarus</option>
    <option value="PW">Belau</option>
    <option value="BE">Belgium</option>
    <option value="BZ">Belize</option>
    <option value="BJ">Benin</option>
    <option value="BM">Bermuda</option>
    <option value="BT">Bhutan</option>
    <option value="BO">Bolivia</option>
    <option value="BQ">Bonaire, Saint Eustatius and Saba</option>
    <option value="BA">Bosnia and Herzegovina</option>
    <option value="BW">Botswana</option>
    <option value="BV">Bouvet Island</option>
    <option value="BR">Brazil</option>
    <option value="IO">British Indian Ocean Territory</option>
    <option value="VG">British Virgin Islands</option>
    <option value="BN">Brunei</option>
    <option value="BG">Bulgaria</option>
    <option value="BF">Burkina Faso</option>
    <option value="BI">Burundi</option>
    <option value="KH">Cambodia</option>
    <option value="CM">Cameroon</option>
    <option value="CA">Canada</option>
    <option value="CV">Cape Verde</option>
    <option value="KY">Cayman Islands</option>
    <option value="CF">Central African Republic</option>
    <option value="TD">Chad</option>
    <option value="CL">Chile</option>
    <option value="CN">China</option>
    <option value="CX">Christmas Island</option>
    <option value="CC">Cocos (Keeling) Islands</option>
    <option value="CO">Colombia</option>
    <option value="KM">Comoros</option>
    <option value="CG">Congo (Brazzaville)</option>
    <option value="CD">Congo (Kinshasa)</option>
    <option value="CK">Cook Islands</option>
    <option value="CR">Costa Rica</option>
    <option value="HR">Croatia</option>
    <option value="CU">Cuba</option>
    <option value="CW">Curaçao</option>
    <option value="CY">Cyprus</option>
    <option value="CZ">Czech Republic</option>
    <option value="DK">Denmark</option>
    <option value="DJ">Djibouti</option>
    <option value="DM">Dominica</option>
    <option value="DO">Dominican Republic</option>
    <option value="EC">Ecuador</option>
    <option value="EG">Egypt</option>
    <option value="SV">El Salvador</option>
    <option value="GQ">Equatorial Guinea</option>
    <option value="ER">Eritrea</option>
    <option value="EE">Estonia</option>
    <option value="ET">Ethiopia</option>
    <option value="FK">Falkland Islands</option>
    <option value="FO">Faroe Islands</option>
    <option value="FJ">Fiji</option>
    <option value="FI">Finland</option>
    <option value="FR">France</option>
    <option value="GF">French Guiana</option>
    <option value="PF">French Polynesia</option>
    <option value="TF">French Southern Territories</option>
    <option value="GA">Gabon</option>
    <option value="GM">Gambia</option>
    <option value="GE">Georgia</option>
    <option value="DE">Germany</option>
    <option value="GH">Ghana</option>
    <option value="GI">Gibraltar</option>
    <option value="GR">Greece</option>
    <option value="GL">Greenland</option>
    <option value="GD">Grenada</option>
    <option value="GP">Guadeloupe</option>
    <option value="GU">Guam</option>
    <option value="GT">Guatemala</option>
    <option value="GG">Guernsey</option>
    <option value="GN">Guinea</option>
    <option value="GW">Guinea-Bissau</option>
    <option value="GY">Guyana</option>
    <option value="HT">Haiti</option>
    <option value="HM">Heard Island and McDonald Islands</option>
    <option value="HN">Honduras</option>
    <option value="HK">Hong Kong</option>
    <option value="HU">Hungary</option>
    <option value="IS">Iceland</option>
    <option value="IN">India</option>
    <option value="ID">Indonesia</option>
    <option value="IR">Iran</option>
    <option value="IQ">Iraq</option>
    <option value="IE">Ireland</option>
    <option value="IM">Isle of Man</option>
    <option value="IL">Israel</option>
    <option value="IT">Italy</option>
    <option value="CI">Ivory Coast</option>
    <option value="JM">Jamaica</option>
    <option value="JP">Japan</option>
    <option value="JE">Jersey</option>
    <option value="JO">Jordan</option>
    <option value="KZ">Kazakhstan</option>
    <option value="KE">Kenya</option>
    <option value="KI">Kiribati</option>
    <option value="KW">Kuwait</option>
    <option value="KG">Kyrgyzstan</option>
    <option value="LA">Laos</option>
    <option value="LV">Latvia</option>
    <option value="LB">Lebanon</option>
    <option value="LS">Lesotho</option>
    <option value="LR">Liberia</option>
    <option value="LY">Libya</option>
    <option value="LI">Liechtenstein</option>
    <option value="LT">Lithuania</option>
    <option value="LU">Luxembourg</option>
    <option value="MO">Macao S.A.R., China</option>
    <option value="MK">Macedonia</option>
    <option value="MG">Madagascar</option>
    <option value="MW">Malawi</option>
    <option value="MY">Malaysia</option>
    <option value="MV">Maldives</option>
    <option value="ML">Mali</option>
    <option value="MT">Malta</option>
    <option value="MH">Marshall Islands</option>
    <option value="MQ">Martinique</option>
    <option value="MR">Mauritania</option>
    <option value="MU">Mauritius</option>
    <option value="YT">Mayotte</option>
    <option value="MX">Mexico</option>
    <option value="FM">Micronesia</option>
    <option value="MD">Moldova</option>
    <option value="MC">Monaco</option>
    <option value="MN">Mongolia</option>
    <option value="ME">Montenegro</option>
    <option value="MS">Montserrat</option>
    <option value="MA">Morocco</option>
    <option value="MZ">Mozambique</option>
    <option value="MM">Myanmar</option>
    <option value="NA">Namibia</option>
    <option value="NR">Nauru</option>
    <option value="NP">Nepal</option>
    <option value="NL">Netherlands</option>
    <option value="NC">New Caledonia</option>
    <option value="NZ">New Zealand</option>
    <option value="NI">Nicaragua</option>
    <option value="NE">Niger</option>
    <option value="NG">Nigeria</option>
    <option value="NU">Niue</option>
    <option value="NF">Norfolk Island</option>
    <option value="KP">North Korea</option>
    <option value="MP">Northern Mariana Islands</option>
    <option value="NO">Norway</option>
    <option value="OM">Oman</option>
    <option value="PK">Pakistan</option>
    <option value="PS">Palestinian Territory</option>
    <option value="PA">Panama</option>
    <option value="PG">Papua New Guinea</option>
    <option value="PY">Paraguay</option>
    <option value="PE">Peru</option>
    <option value="PH">Philippines</option>
    <option value="PN">Pitcairn</option>
    <option value="PL">Poland</option>
    <option value="PT">Portugal</option>
    <option value="PR">Puerto Rico</option>
    <option value="QA">Qatar</option>
    <option value="RE">Reunion</option>
    <option value="RO">Romania</option>
    <option value="RU">Russia</option>
    <option value="RW">Rwanda</option>
    <option value="ST">São Tomé and Príncipe</option>
    <option value="BL">Saint Barthélemy</option>
    <option value="SH">Saint Helena</option>
    <option value="KN">Saint Kitts and Nevis</option>
    <option value="LC">Saint Lucia</option>
    <option value="SX">Saint Martin (Dutch part)</option>
    <option value="MF">Saint Martin (French part)</option>
    <option value="PM">Saint Pierre and Miquelon</option>
    <option value="VC">Saint Vincent and the Grenadines</option>
    <option value="WS">Samoa</option>
    <option value="SM">San Marino</option>
    <option value="SA">Saudi Arabia</option>
    <option value="SN">Senegal</option>
    <option value="RS">Serbia</option>
    <option value="SC">Seychelles</option>
    <option value="SL">Sierra Leone</option>
    <option value="SG">Singapore</option>
    <option value="SK">Slovakia</option>
    <option value="SI">Slovenia</option>
    <option value="SB">Solomon Islands</option>
    <option value="SO">Somalia</option>
    <option value="ZA">South Africa</option>
    <option value="GS">South Georgia/Sandwich Islands</option>
    <option value="KR">South Korea</option>
    <option value="SS">South Sudan</option>
    <option value="ES">Spain</option>
    <option value="LK">Sri Lanka</option>
    <option value="SD">Sudan</option>
    <option value="SR">Suriname</option>
    <option value="SJ">Svalbard and Jan Mayen</option>
    <option value="SZ">Swaziland</option>
    <option value="SE">Sweden</option>
    <option value="CH">Switzerland</option>
    <option value="SY">Syria</option>
    <option value="TW">Taiwan</option>
    <option value="TJ">Tajikistan</option>
    <option value="TZ">Tanzania</option>
    <option value="TH">Thailand</option>
    <option value="TL">Timor-Leste</option>
    <option value="TG">Togo</option>
    <option value="TK">Tokelau</option>
    <option value="TO">Tonga</option>
    <option value="TT">Trinidad and Tobago</option>
    <option value="TN">Tunisia</option>
    <option value="TR">Turkey</option>
    <option value="TM">Turkmenistan</option>
    <option value="TC">Turks and Caicos Islands</option>
    <option value="TV">Tuvalu</option>
    <option value="UG">Uganda</option>
    <option value="UA">Ukraine</option>
    <option value="AE">United Arab Emirates</option>
    <option value="GB">United Kingdom (UK)</option>
    <option value="US">United States (US)</option>
    <option value="UM">United States (US) Minor Outlying Islands</option>
    <option value="VI">United States (US) Virgin Islands</option>
    <option value="UY">Uruguay</option>
    <option value="UZ">Uzbekistan</option>
    <option value="VU">Vanuatu</option>
    <option value="VA">Vatican</option>
    <option value="VE">Venezuela</option>
    <option value="VN" selected="selected">Vietnam</option>
    <option value="WF">Wallis and Futuna</option>
    <option value="EH">Western Sahara</option>
    <option value="YE">Yemen</option>
    <option value="ZM">Zambia</option>
    <option value="ZW">Zimbabwe</option>
    </select>
    </p>


    <p class="form-row form-row-wide" id="calc_shipping_state_field" style="display: none;">
        <input type="hidden" class="hidden" name="calc_shipping_state" id="calc_shipping_state" value="" placeholder="State / County">
    </p>



    <p class="form-row form-row-wide validate-required" id="calc_shipping_city_field">
        <input type="text" class="input-text" value="" placeholder="Town / City" name="calc_shipping_city" id="calc_shipping_city">
    </p>



    <p class="form-row form-row-wide" id="calc_shipping_postcode_field">
        <input type="text" class="input-text" value="" placeholder="Postcode / ZIP" name="calc_shipping_postcode" id="calc_shipping_postcode">
    </p>


    <p><button type="submit" name="calc_shipping" value="1" class="button">Update totals</button></p>

    <input type="hidden" id="woocommerce-shipping-calculator-nonce" name="woocommerce-shipping-calculator-nonce" value="43b348a1ee"><input type="hidden" name="_wp_http_referer" value="/shop/cart/">
    </section>
    </form>
    </div>
    </div>
    </div>
    </div>
}
</div>
<ConfirmModal Id="clear-cart" Title="Clear" Message="Do you really want to clear your cart?" YesEventHandler=@((Action) ClearCart) />
@functions {

    private ECart ECart { get; set; }
    [Parameter]
    private string CouponName { get; set; }
    private string PseudoCartJson { get; set; }
    private bool Loaded { get; set; }

    protected override async Task OnInitAsync()
    {
        RegisteredFunction.Invoke<bool>("initializeSignalR");
        await RefreshCart();
        Loaded = true;
        StateHasChanged();
    }

    private void ClearCartPrompt()
    {
        Util.ShowModal("clear-cart");
    }

    private void ClearCart()
    {
        ECart.Contents.Clear();
        ECart.Coupons.Clear();
        StateHasChanged();
        UpdateCartStorage();
        Util.HideModal();
    }

    private async Task RefreshCart()
    {
        var cartJson = Storage["CART"];
        if (cartJson != null)
        {
            var pseudoCart = JsonConvert.DeserializeObject<PseudoCart>(cartJson, new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Include
            });
            if (pseudoCart.Cart.Any())
            {
                var ecartJson = await Fetcher.Fetch("/api/Cart/Get/", pseudoCart);
                ECart = ecartJson["ECart"].ToObject<ECart>();
            }
        }
        StateHasChanged();
    }

    private async void CheckOut()
    {
        Util.Checkpoint("/checkout");
        if (await Account.GetCurrentUser() != null)
        {
            UriHelper.NavigateTo("/checkout");
        }
        else
        {
            UriHelper.NavigateTo("/login");
            //            Util.ShowLoginModal();
        }
    }

    private void UpdateCartStorage()
    {
        var pseudoCart = ECart.ToPseudo();
        var pseudoStr = JsonConvert.SerializeObject(pseudoCart, new JsonSerializerSettings
        {
            NullValueHandling = NullValueHandling.Include
        });
        PseudoCartJson = pseudoStr;
        Storage["CART"] = pseudoStr;
    }

    private void RemoveFromCart(ECartItem item)
    {
        ECart.Contents.Remove(item);
        ECart.Coupons = ECart.Coupons.Intersect(ECart.AvailableCoupons).ToList();
        StateHasChanged();
        UpdateCartStorage();
    }

    private void UpdateCartQuantity(ECartItem item)
    {
        var quantity = RegisteredFunction.Invoke<int>("getInput", $"#quantity_{item.Guid}");
        item.Quantity = quantity;
        StateHasChanged();
        UpdateCartStorage();
    }

    private void RemoveCoupon(Coupon coupon)
    {
        ECart.Coupons.Remove(coupon);
        StateHasChanged();
        UpdateCartStorage();
    }

    private void ApplyCoupon()
    {
        var coupon = ECart.AvailableCoupons.FirstOrDefault(c => c.Key.Equals(CouponName, StringComparison.CurrentCultureIgnoreCase));
        if (coupon != null)
        {
            if (ECart.Coupons.Any(c => c.Id == coupon.Id)) // this coupon has already been added before
            {
                Toastr.Warning("This coupon has already been added.");
            }
            else
            {
                Toastr.Success("Coupon added.");
                ECart.Coupons.Add(coupon);
                StateHasChanged();
                UpdateCartStorage();
            }
        }
        else
        {
            Toastr.Warning("This coupon is not applicable to your products or has already expired.");
        }
    }
}
