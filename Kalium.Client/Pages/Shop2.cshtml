@using System.Net
@using Kalium.Client.Extensions
@using Microsoft.AspNetCore.Blazor.Browser.Interop
@using Kalium.Shared.Models
@using Kalium.Shared.Consts
@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.EntityFrameworkCore
@using MoreLinq
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@page "/shop/{CategoryName}"
@inject HttpClient Http
@inject IUtil MyUtil

<div id="primary" class="container content-area">
    <main id="main" class="site-main" role="main">
        <header class="woocommerce-shop-header woocommerce-shop-header--columned">

            <div class="woocommerce-shop-header--title woocommerce-products-header">


                <h1 class="woocommerce-products-header__title page-title">Shop</h1>


                <p class="woocommerce-result-count">
                    Showing @Begin-@End of @Total results
                </p>

            </div>

            <div class="woocommerce-shop-header--sorting">

                <form class="woocommerce-ordering" method="get">

                    <div class="woocommerce-ordering--dropdown form-group sort">

                        <div class="dropdown">

                            <button class="dropdown-toggle" type="button" data-toggle="dropdown">
                                <span>
                                    @SortTypeStr
                                </span>
                                <i class="flaticon-bottom4"></i>
                            </button>

                            <ul class="dropdown-menu fade" role="menu">
                                <li role="presentation" class="active pointer" onclick="@(() => ChangeSortType(Consts.SortType.Newness))"><a>Newest first</a></li>
                                <li role="presentation" class="pointer" onclick="@(() => ChangeSortType(Consts.SortType.Popularity))"><a>Most popular first</a></li>
                                <li role="presentation" class="pointer" onclick="@(() => ChangeSortType(Consts.SortType.Rating))"><a>Highest rating first</a></li>
                                <li role="presentation" class="pointer" onclick="@(() => ChangeSortType(Consts.SortType.Price))"><a>Cheapest first</a></li>

                            </ul>

                        </div>
                    </div>

                    <select name="orderby" class="orderby">
                        <option value="date" selected='selected'>Sort by newness</option>
                        <option value="@Consts.SortType.Popularity">Sort by popularity</option>
                        <option value="rating">Sort by average rating</option>
                        <option value="price">Sort by price: low to high</option>
                        <option value="price-desc">Sort by price: high to low</option>
                    </select>
                    <input type="hidden" name="paged" value="1" />
                    <input type="hidden" name="shop-sidebar" value="left" />
                </form>

            </div>

            <div class="woocommerce-shop-header--description hide">
            </div>

        </header>
        <div class="products-archive products-archive--has-sidebar products-archive--sidebar-left products-archive--masonry products-archive--fitrows products-archive--pagination-align-center">

            <div class="products-archive--products">
                <ul id="product-main-list" class="products columns-3">
                    @if (Products == null || !Products.Any())
                    {
                        <li>No products found.</li>
                    }
                    @foreach (var product in Products)
                    {
                        <li class="post-@product.Id product type-product status-publish has-post-thumbnail product_cat-magazines first instock shipping-taxable purchasable product-type-simple catalog-layout-transparent-bg columns-xs-1">
                            <div class="product-images product-images--internal-details">

                                <a href="product/@product.NameUrl" class="woocommerce-LoopProduct-link woocommerce-loop-product__link">
                                    <span class="image-placeholder" style="padding-bottom: 127.27272727%; background-color: #eeeeee">
                                        <span class="loader align-center" data-id="ball-pulse-sync">
                                            <span class="loader-row">
                                                <span class="loader-inner ball-pulse-sync">
                                                    <span></span><span></span><span></span>
                                                </span>
                                            </span>
                                        </span>
                                        <img width="550" height="700" class="attachment-woocommerce_thumbnail size-woocommerce_thumbnail img-200 lazyload"
                                             data-src="@product.MainImage.Url" />
                                    </span>
                                </a>
                                <div class="product-internal-info">
                                    <div class="item-info">

                                        <h3>
                                            <a href="product/@product.NameUrl.ToLower()">@product.Name</a>
                                        </h3>


                                        <div class="product-terms">
                                            <a href="shop/@product.Category.Name.ToLower()" rel="tag">@product.Category.Name</a>
                                        </div>


                                        <div class="product-bottom-details">

                                            <div class="price-column">

                                                <span class="price">
                                                    <span class="woocommerce-Price-amount amount">
                                                        <span class="woocommerce-Price-currencySymbol">&pound;</span>
                                                        @product.DiscountedPrice
                                                    </span>
                                                </span>
                                            </div>

                                            <div class="add-to-cart-column">
                                                <div class="product-loop-add-to-cart-container">
                                                    <div class="add-to-cart-link">
                                                        <a data-quantity="1" class="add_to_cart_button cart-button product_type_simple add_to_cart_button ajax_add_to_cart" data-product_id="34" aria-label="Add &ldquo;Aldap&rdquo; to your cart" rel="nofollow" data-added_to_cart_text="Added to cart">Add to cart</a>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                    </div>
                                </div>
                            </div>
                            @if (product.IsOnSale)
                            {
                                <span class="onsale">Sale!</span>
                            }
                            else
                            {
                                @if (product.Featured)
                                {
                                    <span class="onsale featured">Featured</span>
                                }
                            }
                        </li>
                    }
                </ul>
                @if (End < Total)
                {
                    <nav class="pagination pagination--infinite-scroll" role="navigation">
                        <a onclick="@ShowMore" class="pointer pagination--infinite-scroll-show-more pagination--infinite-scroll-loading-style-pulsating" data-endless-pagination-id="products">
                            <span class="show-more-text">Show more</span>
                            <span class="loading-spinner">
                                <i class="loading-spinner-1"></i>
                            </span>
                        </a>
                    </nav>
                }
            </div>


            <div class="products-archive--sidebar">

                <div class="widget-area products-archive--widgets" role="complementary">

                    <div id="woocommerce_product_search-3" class="widget woocommerce widget_product_search">
                        <form role="search" method="post" class="woocommerce-product-search search-bar">
                            <label class="screen-reader-text" for="woocommerce-product-search-field-0">Search for:</label>
                            <input type="search" id="woocommerce-product-search-field-0" class="search-field form-control" bind="@Phrase"
                                   placeholder="Search products&hellip;" value="" name="s" />
                            @* <button type="submit" value="Search">Go</button> *@
                            <input type="hidden" name="post_type" value="product" />
                        </form>
                    </div><div id="woocommerce_price_filter-3" class="widget woocommerce widget_price_filter">
                        <h2 class="widgettitle">Filter by price</h2>
                        <form method="get" action="https://demo.kaliumtheme.com/shop/shop/">
                            <div class="price_slider_wrapper">
                                <div class="price_slider ui-slider ui-slider-horizontal ui-widget ui-widget-content ui-corner-all" id="slider-range">
                                </div>
                                <div class="price_slider_amount">
                                    <input id="min-price" style="visibility: hidden;" value="@MinPrice" onclick="@UpdatePriceRange" />
                                    <input id="max-price" style="visibility: hidden;" value="@MaxPrice" onclick="@UpdatePriceRange" />
                                    <button type="button" class="button" onclick="@ResetPriceRange">Reset</button>
                                    <div class="price_label" style="">
                                        @if (MinPrice != -1 && MaxPrice != -1)
                                        {
                                            <div>
                                                From <span class="from">£@MinPrice</span> to <span class="to">£@MaxPrice</span>
                                            </div>
                                        }
                                    </div>
                                    <input name="shop-sidebar" value="left" type="hidden">
                                    <div class="clear"></div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div id="woocommerce_product_categories-3" class="widget woocommerce widget_product_categories">
                        <h2 class="widgettitle">Categories</h2>
                        <ul class="product-categories">
                            <li class="cat-item cat-item-17 pointer @(CategoryName == null ? "strong" : "")">
                                <a onclick="@(() =>
                                              {
                                                  CategoryName = null;
                                                  ResetProduct();
                                              })">All categories</a>
                            </li>
                            @foreach (var cat in Categories)
                            {
                                <li class="cat-item cat-item-17 pointer @(CategoryName != null && CategoryName.Equals(cat.Name, StringComparison.CurrentCultureIgnoreCase) ? "strong" : "")">
                                    <a onclick="@(() =>
                                                  {
                                                      CategoryName = cat.Name;
                                                      ResetProduct();
                                                  })">@cat.Name</a>
                                            </li>
                                        }
                        </ul>
                    </div>
                    <div class="widget woocommerce widget_product_categories">
                        <h2 class="widgettitle">Brands</h2>
                        <div class="product-categories">
                            <select id="brand-select" class="my-select2" multiple="multiple">
                                @foreach (var brand in Brands)
                                {
                                    <option value="@brand.Id">@brand.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div id="woocommerce_widget_cart-3" class="widget woocommerce widget_shopping_cart">
                        <h2 class="widgettitle">Origin</h2>
                        @foreach (var origin in Origins)
                        {
                            <label class="woocommerce-form__label woocommerce-form__label-for-checkbox alternate-checkbox block">
                                <input class="woocommerce-form__input woocommerce-form__input-checkbox"
                                       value="@origin" type="checkbox" onchange="@(e => UpdateOrigin(origin))" /> <span>@origin</span>
                                </label>
                            }
                    </div>
                    <div id="woocommerce_widget_cart-3" class="widget woocommerce widget_shopping_cart">
                        <h2 class="widgettitle">Materials</h2>
                        @foreach (var material in Materials)
                        {
                            <label class="woocommerce-form__label woocommerce-form__label-for-checkbox alternate-checkbox block">
                                <input class="woocommerce-form__input woocommerce-form__input-checkbox"
                                       value="@material" type="checkbox" onchange="@(e => UpdateMaterial(material))" /> <span>@material</span>
                                </label>
                            }
                    </div>

                </div>

            </div>


        </div>
        <div class="hide" id="brand-notifier" onclick="@(() => LoadProducts(true))"></div>
    </main>
</div>

@functions{

    [Parameter]
    private string Phrase { get; set; } = "";
    [Parameter]
    private int Page { get; set; } = 1;
    [Parameter]
    private int PageSize { get; set; } = Consts.PageSize;
    [Parameter]
    private string CategoryName { get; set; }
    [Parameter]
    private Category Category { get; set; }
    [Parameter]
    private ICollection<Product> Products { get; set; } = new List<Product>();
    [Parameter]
    private ICollection<Category> Categories { get; set; } = new List<Category>();
    [Parameter]
    private ICollection<Brand> Brands { get; set; } = new List<Brand>();
    [Parameter]
    private ICollection<string> Origins { get; set; } = new List<string>();
    [Parameter]
    private ICollection<string> Materials { get; set; } = new List<string>();
    [Parameter]
    private ICollection<string> ChosenOrigins { get; set; } = new List<string>();
    [Parameter]
    private ICollection<string> ChosenMaterials { get; set; } = new List<string>();
    [Parameter]
    private int SortType { get; set; } = (int)Consts.SortType.Newness;
    [Parameter]
    private double MinPrice { get; set; } = 0;
    [Parameter]
    private double MaxPrice { get; set; } = 1000;
    [Parameter]
    private int TotalPage { get; set; }
    [Parameter]
    private int Total { get; set; }
    [Parameter]
    private int Begin { get; set; }
    [Parameter]
    private int End { get; set; }

    private bool Loaded = false;

    [Parameter]
    private string SortTypeStr { get; set; } = "Newest first";

    private void UpdatePriceRange()
    {
        MinPrice = RegisteredFunction.Invoke<double>("getMinPrice");
        MaxPrice = RegisteredFunction.Invoke<double>("getMaxPrice");
        ResetProduct();
    }

    private void ResetPriceRange()
    {
        MinPrice = 0;
        MaxPrice = 1000;
        ResetProduct();
    }

    private void ChangeSortType(Consts.SortType sortType)
    {
        SortType = (int)sortType;
        switch (sortType)
        {
            case Consts.SortType.Newness:
                SortTypeStr = "Newest first";
                break;
            case Consts.SortType.Popularity:
                SortTypeStr = "Most popular first";
                break;
            case Consts.SortType.Rating:
                SortTypeStr = "Highest rating first";
                break;
            case Consts.SortType.Price:
                SortTypeStr = "Cheapest first";
                break;
        }
        ResetProduct();
    }

    private void UpdateOrigin(string origin)
    {
        if (ChosenOrigins.Contains(origin))
        {
            ChosenOrigins.Remove(origin);
        }
        else
        {
            ChosenOrigins.Add(origin);
        }
        ResetProduct();
    }

    private void UpdateMaterial(string material)
    {
        if (ChosenMaterials.Contains(material))
        {
            ChosenMaterials.Remove(material);
        }
        else
        {
            ChosenMaterials.Add(material);
        }
        ResetProduct();
    }

    private async void ResetProduct()
    {
        Page = 1;
        LoadProducts(true);
    }

    private async void ShowMore()
    {
        Page++;
        LoadProducts(false);
    }

    private async Task LoadProducts(bool newList)
    {
        ICollection<int> ChosenBrands = new List<int>();
        if (Loaded)
        {
            ChosenBrands = RegisteredFunction.Invoke<ICollection<int>>("getSelect2Result", "#brand-select");
            Console.WriteLine(ChosenBrands.Count);
        }
        JObject data = await Fetch("/api/Product/LoadProducts/", new
        {
            Phrase,
            PageSize = Consts.PageSize,
            Page,
            CategoryName,
            SortType,
            MinPrice,
            MaxPrice,
            ChosenOrigins,
            ChosenMaterials,
            ChosenBrands,
            IncludeHidden = false
        });

        string productJson = data["Products"].ToString();
        var newProducts = JsonConvert.DeserializeObject<ICollection<Product>>(productJson);
        if (newList)
        {
            Products.Clear();
            if (!newProducts.Select(p => p.Id).SequenceEqual(Products.Select(p => p.Id)))
            {
                StateHasChanged();
            }
        }
        newProducts.ForEach(p =>
        {
            Products.Add(p);
        });
        Total = (int)data["Total"];
        TotalPage = (int)Math.Ceiling(Total * 1.0 / PageSize);
        Begin = Math.Min(1, Products.Count);
        End = Math.Min(Page * PageSize, Total);
        StateHasChanged();
        FadeIn("#product-main-list");
    }

    private async Task LoadCategories()
    {
        JObject cateJObject = await Fetch("/api/category/LoadCategories/");
        string productJson = cateJObject["Categories"].ToString();
        Categories = JsonConvert.DeserializeObject<ICollection<Category>>(productJson);
    }

    private async Task LoadAttributes()
    {
        JObject cateJObject = await Fetch("/api/product/LoadAttributes/");
        string originJson = cateJObject["Origins"].ToString();
        string materialJson = cateJObject["Materials"].ToString();
        string brandJson = cateJObject["Brands"].ToString();
        Origins = JsonConvert.DeserializeObject<ICollection<string>>(originJson);
        Materials = JsonConvert.DeserializeObject<ICollection<string>>(materialJson);
        Brands = JsonConvert.DeserializeObject<ICollection<Brand>>(brandJson);
    }

    protected override async Task OnInitAsync()
    {
        RegisteredFunction.Invoke<bool>("shop-select2");
        LoadSlider();
        await LoadProducts(true);
        await LoadCategories();
        await LoadAttributes();
        Loaded = true;
        MyUtil.InitializeSignalR();
    }

    private async Task<JObject> Fetch(string url)
    {
        // controller returns: return JsonConvert.SerializeObject(result);
        var json = await Http.GetJsonAsync<object>(url);

        return JsonConvert.DeserializeObject(json.ToString()) as JObject;
    }

    private async Task<JObject> Fetch(string url, object body)
    {
        // controller returns: return JsonConvert.SerializeObject(result);
        var json = await Http.PostJsonAsync<object>(url, JsonConvert.SerializeObject(body));

        return JsonConvert.DeserializeObject(json.ToString()) as JObject;
    }

    private void FadeIn(string selector)
    {
        RegisteredFunction.Invoke<bool>("fadeIn", selector);
    }

    private void FadeOut(string selector)
    {
        RegisteredFunction.Invoke<bool>("fadeOut", selector);
    }

    private void LoadSlider()
    {
        RegisteredFunction.Invoke<bool>("loadSlider");
    }
}